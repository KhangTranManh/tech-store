// Wait for DOM to be fully loaded
document.addEventListener('DOMContentLoaded', function() {
    // Chat functionality
    const chatToggle = document.getElementById('chatToggle');
    const chatContainer = document.getElementById('chatContainer');
    const closeChat = document.getElementById('closeChat');
    const closeChatAI = document.getElementById('closeChatAI');
    const backToMenu = document.getElementById('backToMenu');

    // AI Chat elements
    const defaultHeader = document.getElementById('defaultHeader');
    const aiHeader = document.getElementById('aiHeader');
    const chatOptions = document.getElementById('chatOptions');
    const chatMessages = document.getElementById('chatMessages');
    const chatInputContainer = document.getElementById('chatInputContainer');
    const chatInput = document.getElementById('chatInput');
    const sendBtn = document.getElementById('sendBtn');
    const typingIndicator = document.getElementById('typingIndicator');

    let isAIMode = false;
    let isTyping = false;
    let sessionId = null; // Track session ID

    // Check if elements exist before adding event listeners
    if (chatToggle && chatContainer && closeChat) {
        chatToggle.addEventListener('click', function() {
            chatContainer.classList.add('open');
            chatToggle.classList.add('hidden');
        });

        closeChat.addEventListener('click', function() {
            closeChats();
        });

        if (closeChatAI) {
            closeChatAI.addEventListener('click', function() {
                closeChats();
            });
        }

        if (backToMenu) {
            backToMenu.addEventListener('click', function() {
                exitAIMode();
            });
        }

        // AI Chat input events
        if (sendBtn) {
            sendBtn.addEventListener('click', function() {
                sendMessage();
            });
        }

        if (chatInput) {
            chatInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    sendMessage();
                }
            });
        }

        // Auto-show chat after some time (optional)
        setTimeout(function() {
            if (!chatContainer.classList.contains('open')) {
                const dot = document.querySelector('.notification-dot');
                if (dot) {
                    dot.style.animation = 'pulse 1s infinite';
                }
            }
        }, 5000);

        // Hide chat when clicking outside (optional)
        document.addEventListener('click', function(event) {
            if (!chatContainer.contains(event.target) && !chatToggle.contains(event.target)) {
                if (chatContainer.classList.contains('open')) {
                    closeChats();
                }
            }
        });
    }

    function closeChats() {
        chatContainer.classList.remove('open');
        chatToggle.classList.remove('hidden');
        if (isAIMode) {
            exitAIMode();
        }
    }

    function exitAIMode() {
        isAIMode = false;
        chatContainer.classList.remove('ai-mode');
        
        // Hide AI elements
        if (aiHeader) aiHeader.style.display = 'none';
        if (chatMessages) chatMessages.classList.remove('show');
        if (chatInputContainer) chatInputContainer.classList.remove('show');
        
        // Show default elements
        if (defaultHeader) defaultHeader.style.display = 'block';
        if (chatOptions) chatOptions.style.display = 'block';
    }

    // Global functions
    window.startAIChat = function() {
        isAIMode = true;
        chatContainer.classList.add('ai-mode');
        
        // Hide default elements
        if (defaultHeader) defaultHeader.style.display = 'none';
        if (chatOptions) chatOptions.style.display = 'none';
        
        // Show AI elements
        if (aiHeader) aiHeader.style.display = 'flex';
        if (chatMessages) chatMessages.classList.add('show');
        if (chatInputContainer) chatInputContainer.classList.add('show');
        
        // Test AI connection
        testAIConnection();
        
        // Focus on input
        if (chatInput) {
            chatInput.focus();
        }
        
        scrollToBottom();
    };

    // FIXED: Updated sendMessage function with better validation
    window.sendMessage = async function() {
        const message = chatInput?.value.trim();
        
        // Validate message before sending
        if (!message) {
            console.log('Empty message, not sending');
            return;
        }
        
        if (isTyping) {
            console.log('Already processing a message');
            return;
        }

        // Add user message
        addMessage(message, 'user');
        chatInput.value = '';

        // Show typing indicator
        showTyping();

        try {
            // Call the real AI API
            const response = await generateAIResponse(message);
            hideTyping();
            addMessage(response, 'bot');
        } catch (error) {
            hideTyping();
            console.error('Error getting AI response:', error);
            addMessage('Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau.', 'bot');
        }
    };

    window.sendQuickResponse = function(message) {
        if (chatInput && message?.trim()) {
            chatInput.value = message.trim();
            sendMessage();
        }
    };

    function addMessage(text, type) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${type}`;
        
        const avatar = document.createElement('div');
        avatar.className = `message-avatar ${type}-avatar`;
        avatar.textContent = type === 'user' ? 'üë§' : 'ü§ñ';
        
        const content = document.createElement('div');
        content.className = 'message-content';
        
        // Handle line breaks in AI responses
        if (text.includes('\n')) {
            content.innerHTML = text.replace(/\n/g, '<br>');
        } else {
            content.textContent = text;
        }
        
        if (type === 'user') {
            messageDiv.appendChild(content);
            messageDiv.appendChild(avatar);
        } else {
            messageDiv.appendChild(avatar);
            messageDiv.appendChild(content);
        }
        
        chatMessages?.appendChild(messageDiv);
        scrollToBottom();
    }

    function showTyping() {
        isTyping = true;
        typingIndicator?.classList.add('show');
        scrollToBottom();
    }

    function hideTyping() {
        isTyping = false;
        typingIndicator?.classList.remove('show');
    }

    function scrollToBottom() {
        setTimeout(() => {
            chatMessages?.scrollTo({
                top: chatMessages.scrollHeight,
                behavior: 'smooth'
            });
        }, 100);
    }

    // FIXED: Corrected AI Response function - removed timestamp field
    async function generateAIResponse(message) {
        try {
            console.log('Sending message to AI:', message);
            
            // Prepare request body - only send fields the backend expects
            const requestBody = {
                message: message.trim()
            };
            
            // Include sessionId if we have one
            if (sessionId) {
                requestBody.sessionId = sessionId;
            }
            
            console.log('Request body:', requestBody);
            
            const response = await fetch('/api/ai/chat', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(requestBody)
            });

            console.log('Response status:', response.status);
            console.log('Response headers:', [...response.headers.entries()]);

            // Handle different response statuses
            if (response.status === 400) {
                const errorData = await response.json();
                console.error('Validation error:', errorData);
                throw new Error(errorData.reply || errorData.error || 'Invalid request');
            }

            if (response.status === 429) {
                const errorData = await response.json();
                console.error('Rate limit error:', errorData);
                throw new Error(errorData.reply || 'B·∫°n ƒë√£ g·ª≠i qu√° nhi·ªÅu tin nh·∫Øn. Vui l√≤ng ch·ªù m·ªôt ch√∫t.');
            }

            if (!response.ok) {
                const errorData = await response.json().catch(() => ({}));
                throw new Error(`HTTP ${response.status}: ${errorData.reply || errorData.error || 'Server error'}`);
            }

            const data = await response.json();
            console.log('AI Response data:', data);
            
            // Store sessionId for future requests
            if (data.sessionId) {
                sessionId = data.sessionId;
                console.log('Session ID stored:', sessionId);
            }
            
            if (data.success && data.reply) {
                return data.reply;
            } else {
                throw new Error(data.error || 'Invalid response from AI service');
            }
            
        } catch (error) {
            console.error('AI Chat Error:', error);
            
            // Return appropriate fallback based on error type
            if (error.message.includes('Failed to fetch') || error.message.includes('NetworkError')) {
                return 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng v√† th·ª≠ l·∫°i.';
            }
            
            if (error.message.includes('500')) {
                return 'H·ªá th·ªëng AI t·∫°m th·ªùi g·∫∑p s·ª± c·ªë. Vui l√≤ng li√™n h·ªá nh√¢n vi√™n h·ªó tr·ª£ ƒë·ªÉ ƒë∆∞·ª£c gi√∫p ƒë·ª°.';
            }

            if (error.message.includes('400')) {
                return 'Tin nh·∫Øn kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i v·ªõi tin nh·∫Øn kh√°c.';
            }

            if (error.message.includes('429')) {
                return error.message; // Use the rate limit message from server
            }
            
            // Provide contextual fallback responses
            return getFallbackResponse(message);
        }
    }

    // Fallback responses when AI is not available
    function getFallbackResponse(message) {
        const msg = message.toLowerCase();
        
        if (msg.includes('laptop') || msg.includes('m√°y t√≠nh x√°ch tay')) {
            return `Ch√∫ng t√¥i c√≥ nhi·ªÅu d√≤ng laptop ch·∫•t l∆∞·ª£ng:\n\n‚Ä¢ Gaming Laptops: Acer Predator, ASUS ROG, MSI\n‚Ä¢ Business Laptops: Dell XPS, ThinkPad\n‚Ä¢ Budget Laptops: T·ª´ 10-15 tri·ªáu\n\nVui l√≤ng xem trang /laptops.html ho·∫∑c li√™n h·ªá nh√¢n vi√™n ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chi ti·∫øt.`;
        }
        
        if (msg.includes('gaming') || msg.includes('game')) {
            return `TechStore chuy√™n gaming gear:\n\n‚Ä¢ Gaming PCs: 20-80 tri·ªáu\n‚Ä¢ Gaming Laptops: 15-50 tri·ªáu\n‚Ä¢ Gaming Monitors: 5-25 tri·ªáu\n‚Ä¢ Gaming Accessories\n\nXem th√™m t·∫°i /gaming-pcs.html ho·∫∑c li√™n h·ªá t∆∞ v·∫•n!`;
        }
        
        if (msg.includes('gi√°') || msg.includes('price') || msg.includes('bao nhi√™u')) {
            return 'ƒê·ªÉ b√°o gi√° ch√≠nh x√°c, vui l√≤ng cung c·∫•p:\n‚Ä¢ T√™n s·∫£n ph·∫©m c·ª• th·ªÉ\n‚Ä¢ C·∫•u h√¨nh mong mu·ªën\n‚Ä¢ Ng√¢n s√°ch d·ª± ki·∫øn\n\nNh√¢n vi√™n s·∫Ω t∆∞ v·∫•n gi√° t·ªët nh·∫•t!';
        }
        
        if (msg.includes('ƒë∆°n h√†ng') || msg.includes('order')) {
            return 'ƒê·ªÉ ki·ªÉm tra ƒë∆°n h√†ng, vui l√≤ng cung c·∫•p:\n‚Ä¢ M√£ ƒë∆°n h√†ng\n‚Ä¢ Email ƒë·∫∑t h√†ng\n‚Ä¢ S·ªë ƒëi·ªán tho·∫°i\n\nHo·∫∑c truy c·∫≠p /orders.html ƒë·ªÉ xem l·ªãch s·ª≠ ƒë∆°n h√†ng.';
        }
        
        if (msg.includes('b·∫£o h√†nh') || msg.includes('warranty')) {
            return 'Ch√≠nh s√°ch b·∫£o h√†nh TechStore:\n\n‚Ä¢ Laptop: 12-24 th√°ng\n‚Ä¢ Desktop PC: 24-36 th√°ng\n‚Ä¢ Linh ki·ªán: 12-36 th√°ng\n‚Ä¢ H·ªó tr·ª£ k·ªπ thu·∫≠t mi·ªÖn ph√≠\n\nXem chi ti·∫øt t·∫°i trang ch√≠nh s√°ch b·∫£o h√†nh.';
        }
        
        if (msg.includes('giao h√†ng') || msg.includes('ship')) {
            return 'Ch√≠nh s√°ch giao h√†ng:\n\n‚Ä¢ Mi·ªÖn ph√≠ giao h√†ng ƒë∆°n t·ª´ 500k\n‚Ä¢ Giao nhanh 2-4h t·∫°i TP.HCM\n‚Ä¢ Giao to√†n qu·ªëc 1-3 ng√†y\n‚Ä¢ Ki·ªÉm tra h√†ng tr∆∞·ªõc thanh to√°n';
        }

        // Default response
        return 'Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n\n‚Ä¢ T√¨m s·∫£n ph·∫©m ph√π h·ª£p\n‚Ä¢ T∆∞ v·∫•n c·∫•u h√¨nh\n‚Ä¢ Ki·ªÉm tra ƒë∆°n h√†ng\n‚Ä¢ Th√¥ng tin b·∫£o h√†nh\n‚Ä¢ Ch√≠nh s√°ch c·ª≠a h√†ng\n\nB·∫°n c·∫ßn h·ªó tr·ª£ g√¨?';
    }

    // Add connection status indicator
    function updateConnectionStatus(isConnected) {
        const statusDot = document.querySelector('.ai-status-dot');
        if (statusDot) {
            if (isConnected) {
                statusDot.style.backgroundColor = '#4CAF50';
                statusDot.title = 'AI Online';
            } else {
                statusDot.style.backgroundColor = '#f44336';
                statusDot.title = 'AI Offline - Using fallback responses';
            }
        }
    }

    // Test if AI service is available
    async function testAIConnection() {
        try {
            console.log('Testing AI connection...');
            const response = await fetch('/api/ai/chat/health');
            const isHealthy = response.ok;
            
            if (isHealthy) {
                const data = await response.json();
                console.log('AI Health Check:', data);
            }
            
            updateConnectionStatus(isHealthy);
        } catch (error) {
            console.warn('AI service not available, using fallback responses:', error);
            updateConnectionStatus(false);
        }
    }

    // Clear session when chat is closed
    function closeChats() {
        chatContainer.classList.remove('open');
        chatToggle.classList.remove('hidden');
        
        // Reset session
        sessionId = null;
        
        if (isAIMode) {
            exitAIMode();
        }
    }
});

// Chat option functions (keeping your existing functions)
function startStaffChat() {
    alert('ƒêang k·∫øt n·ªëi v·ªõi nh√¢n vi√™n t∆∞ v·∫•n...');
    // Here you would typically open a chat widget or redirect to a chat page
}

function startCall() {
    // Replace with your actual phone number
    window.location.href = 'tel:+84123456789';
}