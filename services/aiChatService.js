// services/aiChatService.js
const axios = require('axios');

class AIChatService {
    constructor() {
        this.ollamaUrl = process.env.OLLAMA_URL || 'http://localhost:11434/api/generate';
        this.model = process.env.OLLAMA_MODEL || 'llama2';
        this.storeContext = this.buildStoreContext();
        this.maxRetries = 2; // Reduced retries for faster fallback
        this.timeout = 15000; // Reduced timeout for faster fallback
        this.isOllamaAvailable = null; // Cache Ollama availability
    }

    buildStoreContext() {
        return `
You are a 5-year veteran sales expert at TechStore Vietnam. You know the market inside-out and speak like an experienced salesperson who gets straight to the point.

SALES PERSONALITY:
- 5 years experience selling tech in Vietnam
- Know exactly what customers need without long explanations
- Give direct, confident recommendations
- Use sales-focused language that closes deals
- Always push for the sale while being helpful
- Speak naturally, not like a robot

STORE INFO:
- TechStore Vietnam, TP.HCM
- Gaming & Business tech specialist
- Free ship 500k+, same-day delivery HCMC
- 12-36 th√°ng b·∫£o h√†nh, tr·∫£ g√≥p 0%

QUICK PRICE RANGES (memorize these):
- Gaming laptop: 18-45M (sweet spot: 25-30M)
- Business laptop: 12-28M (sweet spot: 15-20M)  
- Gaming PC: 25-70M (popular: 30-40M RTX 4060/4070)
- Monitor gaming: 6-18M (24" 144Hz ~8M, 27" ~12M)
- Linh ki·ªán: SSD 1TB ~2M, RAM 16GB ~3M, GPU RTX 4060 ~12M

HOT DEALS (mention these often):
- RTX 4060 builds: 29.9M (best seller)
- ASUS gaming laptops: Gi·∫£m 15% th√°ng n√†y
- Combo PC + m√†n h√¨nh: Gi·∫£m th√™m 10%

SALES APPROACH:
1. Ask budget first ("Anh/ch·ªã d·ª± ki·∫øn bao nhi√™u?")
2. Identify main use (gaming/work/h·ªçc t·∫≠p)
3. Recommend 2-3 options max
4. Highlight best value option
5. Create urgency (stock, promotions)
6. Ask for the close

RESPONSE STYLE:
- Keep answers under 100 words unless asked for details
- Use direct Vietnamese sales language
- Include prices in every recommendation
- Always end with a call-to-action
- Speak confidently about products
- Use "Anh/Ch·ªã" appropriately

AVOID:
- Long technical explanations
- More than 3 product options
- Boring corporate language
- Being too polite (be confident)

Current date: ${new Date().toLocaleDateString('vi-VN')}
Store status: ${this.getStoreStatus()}
`;
    }

    getStoreStatus() {
        const now = new Date();
        const hour = now.getHours();
        const day = now.getDay();
        
        if (day === 0) { // Sunday
            return hour >= 9 && hour < 18 ? "üü¢ M·ªü c·ª≠a (9h-18h CN)" : "üî¥ ƒê√£ ƒë√≥ng c·ª≠a";
        } else if (day >= 1 && day <= 6) { // Mon-Sat
            return hour >= 8 && hour < 20 ? "üü¢ M·ªü c·ª≠a (8h-20h)" : "üî¥ ƒê√£ ƒë√≥ng c·ª≠a";
        }
        return "üî¥ ƒê√£ ƒë√≥ng c·ª≠a";
    }

    async getDatabaseContext(userMessage) {
        try {
            // Since you're using MongoDB, we'll simulate database queries
            // You can replace this with actual MongoDB queries to your Product collection
            const searchTerms = this.extractSearchTerms(userMessage);
            let context = '';

            if (searchTerms.length > 0) {
                // Simulate product search - replace with actual MongoDB query
                const mockProducts = await this.getMockProducts(searchTerms);
                
                if (mockProducts.length > 0) {
                    context += '\nS·∫¢N PH·∫®M HI·ªÜN C√ì TRONG KHO:\n';
                    mockProducts.forEach(product => {
                        const price = product.price ? product.price.toLocaleString('vi-VN') : 'Li√™n h·ªá';
                        const stock = product.stockQuantity > 0 ? `C√≤n ${product.stockQuantity}` : 'H·∫øt h√†ng';
                        context += `- ${product.name}: ${price}‚Ç´ (${stock})\n`;
                    });
                }
            }

            // Add current promotions or featured products
            context += this.getCurrentPromotions();
            
            return context;

        } catch (error) {
            console.error('Database context error:', error);
            return '\n[Kh√¥ng th·ªÉ truy xu·∫•t th√¥ng tin s·∫£n ph·∫©m hi·ªán t·∫°i]';
        }
    }

    extractSearchTerms(message) {
        const msg = message.toLowerCase();
        const terms = [];

        // Product type keywords
        const productKeywords = [
            'laptop', 'gaming', 'pc', 'monitor', 'm√†n h√¨nh', 'm√°y t√≠nh',
            'linh ki·ªán', 'component', 'cpu', 'gpu', 'ram', 'ssd', 'hdd',
            'card ƒë·ªì h·ªça', 'b√†n ph√≠m', 'keyboard', 'chu·ªôt', 'mouse',
            'tai nghe', 'headset', 'loa', 'speaker', 'webcam', 'camera',
            'xiaomi', 'iphone', 'samsung', 'oppo', 'vivo', 'realme' // Added phone brands
        ];

        // Brand keywords
        const brandKeywords = [
            'acer', 'asus', 'msi', 'dell', 'hp', 'lenovo', 'apple', 'macbook',
            'predator', 'rog', 'alienware', 'intel', 'amd', 'nvidia', 'corsair',
            'logitech', 'razer', 'steelseries', 'hyperx', 'xiaomi', 'redmi'
        ];

        // Price range keywords
        const priceKeywords = ['tri·ªáu', 'million', 'ngh√¨n', 'thousand', 'gi√°', 'price'];

        [...productKeywords, ...brandKeywords, ...priceKeywords].forEach(keyword => {
            if (msg.includes(keyword)) {
                terms.push(keyword);
            }
        });

        return terms;
    }

    async getMockProducts(searchTerms) {
        // Mock product data - replace with actual MongoDB queries
        const mockInventory = [
            { name: 'Acer Predator Helios 300', price: 25990000, stockQuantity: 5, category: 'laptop gaming' },
            { name: 'ASUS ROG Strix G15', price: 32990000, stockQuantity: 3, category: 'laptop gaming' },
            { name: 'MSI GF63 Thin', price: 18990000, stockQuantity: 8, category: 'laptop gaming' },
            { name: 'Dell XPS 13', price: 28990000, stockQuantity: 4, category: 'laptop business' },
            { name: 'MacBook Air M2', price: 32990000, stockQuantity: 2, category: 'laptop apple' },
            { name: 'Gaming PC RTX 4070', price: 45990000, stockQuantity: 2, category: 'gaming pc' },
            { name: 'Gaming PC RTX 4060', price: 29990000, stockQuantity: 3, category: 'gaming pc' },
            { name: 'Monitor ASUS 27" 144Hz', price: 12990000, stockQuantity: 6, category: 'monitor gaming' },
            { name: 'LG UltraWide 34"', price: 18990000, stockQuantity: 2, category: 'monitor ultrawide' },
            { name: 'Corsair K95 RGB', price: 4990000, stockQuantity: 10, category: 'keyboard gaming' },
            // Added phone accessories for Xiaomi queries
            { name: 'Xiaomi Redmi Buds 3', price: 890000, stockQuantity: 15, category: 'tai nghe xiaomi' },
            { name: 'Xiaomi Mi Power Bank', price: 450000, stockQuantity: 12, category: 'ph·ª• ki·ªán xiaomi' },
            { name: 'Xiaomi Mi Watch', price: 2990000, stockQuantity: 8, category: 'smartwatch xiaomi' }
        ];

        // Filter products based on search terms
        return mockInventory.filter(product => {
            const productText = `${product.name} ${product.category}`.toLowerCase();
            return searchTerms.some(term => productText.includes(term));
        }).slice(0, 5); // Limit to 5 products
    }

    getCurrentPromotions() {
        const promotions = [
            '\nKHUY·∫æN M√ÉI HI·ªÜN T·∫†I:',
            'üéØ Gi·∫£m 10% laptop gaming khi mua k√®m chu·ªôt + b√†n ph√≠m',
            'üöö Mi·ªÖn ph√≠ giao h√†ng to√†n qu·ªëc cho ƒë∆°n t·ª´ 500,000‚Ç´',
            '‚ö° Giao h√†ng nhanh 2-4h t·∫°i TP.HCM',
            'üîß Mi·ªÖn ph√≠ c√†i ƒë·∫∑t v√† h·ªó tr·ª£ k·ªπ thu·∫≠t\n'
        ];
        
        return promotions.join('\n');
    }

    async generateResponse(userMessage, userId = null, sessionId = null, session = null) {
        const startTime = Date.now();
        
        try {
            // FORCE FALLBACK FOR NOW - Skip Ollama completely
            console.log('[AI Service] Using fallback for consistent short responses');
            return this.getFallbackResponse(userMessage);
            
            // Original Ollama code commented out
            /*
            // Quick check if Ollama is available (cached for 5 minutes)
            if (this.isOllamaAvailable === false) {
                console.log('[AI Service] Ollama marked as unavailable, using fallback');
                return this.getFallbackResponse(userMessage);
            }

            // Get relevant database context
            const dbContext = await this.getDatabaseContext(userMessage);
            
            // Build complete prompt
            const fullPrompt = `${this.storeContext}\n${dbContext}\n\nKh√°ch h√†ng: ${userMessage}\n\nTr·∫£ l·ªùi (b·∫±ng ti·∫øng Vi·ªát):`;

            // Call Ollama API with retry logic
            const response = await this.callOllamaWithRetry(fullPrompt);
            
            // Mark Ollama as available
            this.isOllamaAvailable = true;
            
            // Clean up the response
            const cleanedResponse = this.cleanResponse(response);
            
            // Log for monitoring
            const responseTime = Date.now() - startTime;
            console.log(`AI Chat - User: "${userMessage.substring(0, 50)}..."`);
            console.log(`AI Chat - Response Time: ${responseTime}ms`);
            console.log(`AI Chat - Response: "${cleanedResponse.substring(0, 100)}..."`);

            return cleanedResponse;
            */

        } catch (error) {
            console.error('AI Chat Service Error:', error.message);
            return this.getFallbackResponse(userMessage);
        }
    }

    async callOllamaWithRetry(prompt, retryCount = 0) {
        try {
            const response = await axios.post(this.ollamaUrl, {
                model: this.model,
                prompt: prompt,
                stream: false,
                options: {
                    temperature: 0.7,
                    top_p: 0.9,
                    max_tokens: 600,
                    stop: ['Kh√°ch h√†ng:', 'Customer:', 'User:', '\n\n\n']
                }
            }, {
                timeout: this.timeout,
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            if (!response.data || !response.data.response) {
                throw new Error('Invalid response from Ollama');
            }

            return response.data.response;

        } catch (error) {
            if (retryCount < this.maxRetries) {
                console.warn(`Ollama request failed, retrying... (${retryCount + 1}/${this.maxRetries})`);
                await new Promise(resolve => setTimeout(resolve, 1000 * (retryCount + 1))); // Progressive delay
                return this.callOllamaWithRetry(prompt, retryCount + 1);
            }
            throw error;
        }
    }

    cleanResponse(response) {
        if (!response) return '';
        
        return response
            .trim()
            .replace(/^(Tr·∫£ l·ªùi:|Response:|AI:|Assistant:|Bot:)/i, '')
            .replace(/\n{3,}/g, '\n\n')
            .replace(/^\s*[-‚Ä¢]\s*/gm, '‚Ä¢ ') // Normalize bullet points
            .trim();
    }

    // Made public for external use - NATURAL SALES CONVERSATION
    getFallbackResponse(message) {
        const msg = message.toLowerCase().trim();
        
        // Handle unclear/short messages
        if (msg.length === 0) {
            return 'Anh/ch·ªã c·∫ßn t∆∞ v·∫•n g√¨ ·∫°?';
        }
        
        if (msg.length === 1) {
            return 'Anh/ch·ªã c√≥ th·ªÉ n√≥i r√µ h∆°n ƒë∆∞·ª£c kh√¥ng? Em ch∆∞a hi·ªÉu √Ω anh/ch·ªã.';
        }
        
        // Greetings - Natural response
        if (msg.includes('xin ch√†o') || msg.includes('hello') || msg.includes('hi') || msg.includes('halo') || msg.includes('ch√†o')) {
            return 'Ch√†o anh/ch·ªã ·∫°! Em l√† nh√¢n vi√™n t∆∞ v·∫•n TechStore. H√¥m nay anh/ch·ªã c·∫ßn t√¨m hi·ªÉu s·∫£n ph·∫©m g√¨ ·∫°?';
        }
        
        // Thank you responses
        if (msg.includes('c·∫£m ∆°n') || msg.includes('thanks') || msg.includes('thank you')) {
            return 'D·∫° kh√¥ng c√≥ g√¨ ·∫°! Anh/ch·ªã c√≤n c·∫ßn t∆∞ v·∫•n th√™m g√¨ n·ªØa kh√¥ng?';
        }
        
        // Agreement/confirmation
        if (msg === 'ok' || msg === 'okay' || msg === 'ƒë∆∞·ª£c' || msg === '·ª´m' || msg === 'uhm') {
            return 'V·∫≠y anh/ch·ªã c√≥ mu·ªën em t∆∞ v·∫•n c·ª• th·ªÉ h∆°n kh√¥ng ·∫°? Ho·∫∑c c·∫ßn b√°o gi√° chi ti·∫øt?';
        }
        
        // Disagreement/declining
        if (msg === 'kh√¥ng' || msg === 'no' || msg === 'th√¥i' || msg === 'kh√¥ng c·∫ßn') {
            return 'D·∫° ƒë∆∞·ª£c ·∫°! C√≥ g√¨ c·∫ßn h·ªó tr·ª£ th√™m anh/ch·ªã c·ª© li√™n h·ªá em nh√©!';
        }
        
        // Questions about availability
        if (msg.includes('c√≥ kh√¥ng') || msg.includes('c√≥...kh√¥ng') || msg.includes('c√≥ b√°n kh√¥ng')) {
            return 'Anh/ch·ªã ƒëang t√¨m s·∫£n ph·∫©m g√¨ c·ª• th·ªÉ ·∫°? Em s·∫Ω ki·ªÉm tra t√¨nh tr·∫°ng h√†ng cho anh/ch·ªã.';
        }
        
        // Price inquiries
        if (msg.includes('gi√°') || msg.includes('bao nhi√™u') || msg.includes('price') || msg.includes('cost')) {
            return 'D·∫° anh/ch·ªã mu·ªën h·ªèi gi√° s·∫£n ph·∫©m n√†o ·∫°? Em s·∫Ω b√°o gi√° chi ti·∫øt v√† ∆∞u ƒë√£i hi·ªán t·∫°i lu√¥n.';
        }
        
        // Budget mentions
        if (msg.includes('tri·ªáu') || msg.includes('million') || msg.includes('ngh√¨n') || msg.includes('budget')) {
            return 'D·∫° em hi·ªÉu budget c·ªßa anh/ch·ªã r·ªìi. V·∫≠y anh/ch·ªã c·∫ßn mua lo·∫°i s·∫£n ph·∫©m g√¨ ·∫°? Laptop, PC hay linh ki·ªán?';
        }
        
        // General product categories
        if (msg.includes('laptop') || msg.includes('m√°y t√≠nh x√°ch tay')) {
            return 'D·∫° anh/ch·ªã c·∫ßn laptop ƒë·ªÉ l√†m g√¨ ch·ªß y·∫øu ·∫°? Ch∆°i game, l√†m vi·ªác vƒÉn ph√≤ng, hay h·ªçc t·∫≠p?';
        }
        
        if (msg.includes('pc') || msg.includes('m√°y t√≠nh ƒë·ªÉ b√†n') || msg.includes('desktop')) {
            return 'D·∫° anh/ch·ªã mu·ªën PC ƒë·ªÉ l√†m g√¨ ·∫°? Gaming, l√†m vi·ªác, hay d√πng gia ƒë√¨nh?';
        }
        
        if (msg.includes('gaming') || msg.includes('game') || msg.includes('ch∆°i game')) {
            return 'D·∫° anh/ch·ªã ch∆°i game g√¨ ch·ªß y·∫øu ·∫°? V√† th√≠ch laptop gaming hay PC gaming?';
        }
        
        // Work-related
        if (msg.includes('l√†m vi·ªác') || msg.includes('vƒÉn ph√≤ng') || msg.includes('office') || msg.includes('work')) {
            return 'D·∫° anh/ch·ªã l√†m c√¥ng vi·ªác g√¨ ·∫°? C·∫ßn m√°y di ƒë·ªông hay ƒë·ªÉ b√†n? Em s·∫Ω t∆∞ v·∫•n ph√π h·ª£p.';
        }
        
        // Study-related  
        if (msg.includes('h·ªçc') || msg.includes('sinh vi√™n') || msg.includes('student') || msg.includes('study')) {
            return 'D·∫° anh/ch·ªã ƒëang h·ªçc ng√†nh g√¨ ·∫°? C·∫ßn m√°y ƒë·ªÉ code, thi·∫øt k·∫ø, hay ch·ªâ l√†m b√†i t·∫≠p th√¥i?';
        }
        
        // Brand inquiries
        if (msg.includes('asus') || msg.includes('dell') || msg.includes('hp') || msg.includes('lenovo') || msg.includes('acer') || msg.includes('msi')) {
            return 'D·∫° em c√≥ h√†ng c·ªßa h√£ng n√†y. Anh/ch·ªã c·∫ßn lo·∫°i m√°y n√†o ·∫°? Gaming, vƒÉn ph√≤ng hay h·ªçc t·∫≠p?';
        }
        
        if (msg.includes('apple') || msg.includes('macbook') || msg.includes('mac')) {
            return 'D·∫° b√™n em c√≥ MacBook Air v√† Pro. Anh/ch·ªã d√πng ƒë·ªÉ l√†m g√¨ ch·ªß y·∫øu ·∫°?';
        }
        
        // When customer asks about phones
        if (msg.includes('iphone') || msg.includes('ƒëi·ªán tho·∫°i') || msg.includes('phone') || msg.includes('samsung') || msg.includes('xiaomi')) {
            return 'D·∫° TechStore chuy√™n v·ªÅ m√°y t√≠nh v√† linh ki·ªán ·∫°. Anh/ch·ªã c√≥ c·∫ßn laptop hay PC kh√¥ng?';
        }
        
        // Component-related
        if (msg.includes('linh ki·ªán') || msg.includes('component') || msg.includes('n√¢ng c·∫•p') || msg.includes('upgrade')) {
            return 'D·∫° anh/ch·ªã mu·ªën n√¢ng c·∫•p linh ki·ªán g√¨ ·∫°? CPU, RAM, ·ªï c·ª©ng, hay card ƒë·ªì h·ªça?';
        }
        
        // Warranty/service
        if (msg.includes('b·∫£o h√†nh') || msg.includes('warranty') || msg.includes('s·ª≠a ch·ªØa')) {
            return 'D·∫° anh/ch·ªã c·∫ßn h·ªó tr·ª£ b·∫£o h√†nh s·∫£n ph·∫©m n√†o ·∫°? C√≥ th·ªÉ cung c·∫•p m√£ ƒë∆°n h√†ng ƒë∆∞·ª£c kh√¥ng?';
        }
        
        // Delivery/shipping
        if (msg.includes('giao h√†ng') || msg.includes('ship') || msg.includes('delivery')) {
            return 'D·∫° b√™n em c√≥ giao h√†ng to√†n qu·ªëc. Anh/ch·ªã ·ªü khu v·ª±c n√†o ·∫°? Em s·∫Ω t∆∞ v·∫•n th·ªùi gian giao h√†ng.';
        }
        
        // Payment
        if (msg.includes('tr·∫£ g√≥p') || msg.includes('thanh to√°n') || msg.includes('payment') || msg.includes('installment')) {
            return 'D·∫° b√™n em c√≥ h·ªó tr·ª£ tr·∫£ g√≥p 0% l√£i su·∫•t. Anh/ch·ªã quan t√¢m s·∫£n ph·∫©m n√†o ·∫°?';
        }
        
        // Comparison requests
        if (msg.includes('so s√°nh') || msg.includes('kh√°c nhau') || msg.includes('compare') || msg.includes('difference')) {
            return 'D·∫° anh/ch·ªã mu·ªën so s√°nh nh·ªØng s·∫£n ph·∫©m n√†o v·ªõi nhau ·∫°? Em s·∫Ω ph√¢n t√≠ch ∆∞u nh∆∞·ª£c ƒëi·ªÉm cho anh/ch·ªã.';
        }
        
        // Recommendation requests
        if (msg.includes('t∆∞ v·∫•n') || msg.includes('recommend') || msg.includes('n√™n mua') || msg.includes('suggest')) {
            return 'D·∫° anh/ch·ªã cho em bi·∫øt budget v√† m·ª•c ƒë√≠ch s·ª≠ d·ª•ng ch√≠nh, em s·∫Ω t∆∞ v·∫•n s·∫£n ph·∫©m ph√π h·ª£p nh·∫•t ·∫°.';
        }
        
        // Unclear messages - Ask for clarification naturally
        if (msg.length <= 3) {
            return 'Em ch∆∞a hi·ªÉu r√µ √Ω anh/ch·ªã. Anh/ch·ªã c√≥ th·ªÉ n√≥i c·ª• th·ªÉ h∆°n ƒë∆∞·ª£c kh√¥ng ·∫°?';
        }
        
        // Default response - Natural and helpful
        return 'Em ch∆∞a hi·ªÉu r√µ anh/ch·ªã c·∫ßn t∆∞ v·∫•n g√¨. Anh/ch·ªã c√≥ th·ªÉ n√≥i c·ª• th·ªÉ h∆°n kh√¥ng ·∫°? Laptop, PC, linh ki·ªán, hay d·ªãch v·ª• g√¨ ƒë√≥?';
    }

    async checkHealth() {
        try {
            const response = await axios.get(`${this.ollamaUrl.replace('/api/generate', '/api/version')}`, {
                timeout: 5000
            });
            this.isOllamaAvailable = true;
            return {
                status: 'healthy',
                model: this.model,
                version: response.data?.version || 'unknown'
            };
        } catch (error) {
            this.isOllamaAvailable = false;
            return {
                status: 'unhealthy',
                error: error.message,
                model: this.model
            };
        }
    }
}

module.exports = new AIChatService();